AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to prune ec2 and ebs'
Parameters:
    RoleName:
        Type: String
        Description: "IAM Role used for Lambda execution"
        Default: 'arn:aws:iam::${AWS::AccountId}:role/ebs-lambda-worker'
    LambdaRate:
        Description: 'The rate (frequency) to trigger the Lambda function'
        Default: rate(24 hours)
        AllowedValues:
            - rate(12 hours)
            - rate(24 hours)
        Type: String

Resources:
    ebsautoprune:
    Type: 'AWS::Lambda::Function'
    Properties:
        FunctionName: ebs-backup-prune
        Handler: index.lambda_handler
        Runtime: python3.6
        Code:
            ZipFile: |
                import boto3
                import re
                import datetime

                ec = boto3.client('ec2')
                iam = boto3.client('iam')

                """
                This function looks at *all* snapshots that have a "DeleteOn" tag containing
                the current day formatted as YYYY-MM-DD. This function should be run at least
                daily.
                """

                def lambda_handler(event, context):
                    account_ids = list()
                    try:
                        """
                        You can replace this try/except by filling in `account_ids` yourself.
                        Get your account ID with:
                        > import boto3
                        > iam = boto3.client('iam')
                        > print iam.get_user()['User']['Arn'].split(':')[4]
                        """
                        iam.get_user()
                    except Exception as e:
                        # use the exception message to get the account ID the function executes under
                        account_ids.append(re.search(r'(arn:aws:sts::)([0-9]+)', str(e)).groups()[1])


                    delete_on = datetime.date.today().strftime('%Y-%m-%d')
                    filters = [
                        {'Name': 'tag-key', 'Values': ['DeleteOn']},
                        {'Name': 'tag-value', 'Values': [delete_on]},
                    ]
                    snapshot_response = ec.describe_snapshots(OwnerIds=account_ids, Filters=filters)


                    for snap in snapshot_response['Snapshots']:
                        print "Deleting snapshot %s" % snap['SnapshotId']
                        ec.delete_snapshot(SnapshotId=snap['SnapshotId'])
        Role: !Ref RoleName
        
    LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: !Ref LambdaRate
      State: ENABLED
      Targets:
        - Arn: !Sub ${ebsautoprune.Arn}
          Id: LambdaSchedule

    LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${ebsautoprune.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}