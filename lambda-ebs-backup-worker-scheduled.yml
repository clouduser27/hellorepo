AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to backup ec2 and ebs'
Parameters:
  RoleName:
    Type: String
    Description: "IAM Role used for Lambda execution"
    Default: 'arn:aws:iam::${AWS::AccountId}:role/ebs-lambda-worker'
  LambdaRate:
    Description: 'The rate (frequency) to trigger the Lambda function'
    Default: rate(24 hours)
    AllowedValues:
      - rate(12 hours)
      - rate(24 hours)
    Type: String
    
Resources:
  ebsbackupworker:
    Type: 'AWS::Lambda::Function'
    Properties:
        FunctionName: ebs-backup-worker
        Handler: index.lambda_handler
        Runtime: python3.6
        Code:
            ZipFile: |
                import boto3
                import collections
                import datetime

                ec = boto3.client('ec2')

                def lambda_handler(event, context):
                    reservations = ec.describe_instances(
                        Filters=[
                            {'Name': 'tag-key', 'Values': ['backup', 'Backup']},
                        ]
                    ).get(
                        'Reservations', []
                    )

                    instances = sum(
                        [
                            [i for i in r['Instances']]
                            for r in reservations
                        ], [])

                    print "Found %d instances that need backing up" % len(instances)

                    to_tag = collections.defaultdict(list)

                    for instance in instances:
                        try:
                            retention_days = [
                                int(t.get('Value')) for t in instance['Tags']
                                if t['Key'] == 'Retention'][0]
                        except IndexError:
                            retention_days = 5

                        for dev in instance['BlockDeviceMappings']:
                            if dev.get('Ebs', None) is None:
                                continue
                            vol_id = dev['Ebs']['VolumeId']
                            print "Found EBS volume %s on instance %s" % (
                                vol_id, instance['InstanceId'])

                            snap = ec.create_snapshot(
                                VolumeId=vol_id,
                            )

                            to_tag[retention_days].append(snap['SnapshotId'])

                            print "Retaining snapshot %s of volume %s from instance %s for %d days" % (
                                snap['SnapshotId'],
                                vol_id,
                                instance['InstanceId'],
                                retention_days,
                            )

                    for retention_days in to_tag.keys():
                        delete_date = datetime.date.today() + datetime.timedelta(days=retention_days)
                        delete_fmt = delete_date.strftime('%Y-%m-%d')
                        print "Will delete %d snapshots on %s" % (len(to_tag[retention_days]), delete_fmt)
                        ec.create_tags(
                            Resources=to_tag[retention_days],
                            Tags=[
                                {'Key': 'DeleteOn', 'Value': delete_fmt},
                            ]
                        )
        Timeout: 10
        Role: !Ref RoleName
  
  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: !Ref LambdaRate
      State: ENABLED
      Targets:
        - Arn: !Sub ${ebsbackupworker.Arn}
          Id: LambdaSchedule

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${ebsbackupworker.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}